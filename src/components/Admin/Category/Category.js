import { useEffect } from 'react';
import { useForm } from "react-hook-form";
import { Box, Button, Container, Grid, TextField, Typography } from '@mui/material';
import Sidebar from '../Sidebar/Sidebar';
import sweetAlert from '../../Shared/SweetAlert/SweetAlert';

const Category = () => {

    document.title = 'Category Upload';

    //For handling Login
    const {
        register: registerCategory,
        formState: {
            errors: categoryError,
            isSubmitSuccessful: isCategorySubmitSuccessful
        },
        handleSubmit: handleSubmitCategory,
        reset: resetCategory
    } = useForm();

    //This useEffect is used to clear input fields after successful Category form submission
    useEffect(() => {
        if (isCategorySubmitSuccessful) {
            resetCategory();
        }
    }, [isCategorySubmitSuccessful, resetCategory]);

    const category = data => {
        const { category_id, categoryName, categoryDescription } = data;

        const categoryData = {
            category_id,
            name: categoryName,
            description: categoryDescription
        };

        const url = `http://localhost:5000/category`;
        fetch(url, {
            method: 'POST',
            headers: { 'Content-type': 'application/json' },
            body: JSON.stringify(categoryData)
        })
            .then(res => res.json())
            .then(result => {
                console.log(result);
                sweetAlert('Category added successfully!', 'success');
            });
    };

    return (
        <section id='category'>
            <Container>
                <Grid container spacing={2}>
                    <Grid item xs={2}>
                        <Sidebar />
                    </Grid>
                    <Grid item xs={10} my={10}>
                        <Box>
                            <Typography mb={3} variant="h4" gutterBottom component="div">
                                Category Upload
                            </Typography>
                            <Typography mb={3} variant="body1" gutterBottom>
                                You can assign new category by providing necessary information. Unique IDs will be generated by MongoDB once you upload the data.
                            </Typography>

                            <form onSubmit={handleSubmitCategory(category)}>
                                <TextField sx={{ mb: 2 }}
                                    label="Category Name"
                                    type="text"
                                    fullWidth
                                    size="small"
                                    InputLabelProps={{
                                        shrink: true
                                    }}
                                    {...registerCategory("categoryName", { required: "This field is required" })}
                                    error={!!categoryError.categoryName}
                                    helperText={categoryError?.categoryName ? categoryError.categoryName.message : null}
                                />
                                <TextField sx={{ mb: 2 }}
                                    label="Category ID"
                                    type="text"
                                    fullWidth
                                    size="small"
                                    InputLabelProps={{
                                        shrink: true
                                    }}
                                    {...registerCategory("category_id", { required: "This field is required" })}
                                    error={!!categoryError.category_id}
                                    helperText={categoryError?.category_id ? categoryError.category_id.message : null}
                                />
                                <TextField sx={{ mb: 2 }}
                                    label="Description"
                                    type="text"
                                    fullWidth
                                    size="small"
                                    multiline
                                    minRows={5}
                                    InputLabelProps={{
                                        shrink: true
                                    }}
                                    {...registerCategory("categoryDescription", { required: "This field is required" })}
                                    error={!!categoryError.categoryDescription}
                                    helperText={categoryError?.categoryDescription ? categoryError.categoryDescription.message : null}
                                />
                                <Button
                                    size='large'
                                    type="submit"
                                    color='success'
                                    variant='contained'
                                >
                                    Submit
                                </Button>
                            </form>
                        </Box>
                    </Grid>
                </Grid>
            </Container>
        </section>
    );
};

export default Category;